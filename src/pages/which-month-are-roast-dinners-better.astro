---
import BaseLayout from "../layouts/BaseLayout.astro";
import type { Comments as CommentsType, Page, Post } from "../types";

import "../styles/post.css";
import Comments from "../components/comments.astro";
import logo3 from "../images/logo-3.png";
import { fetchGraphQL } from "../lib/api";
import GET_ALL_POSTS from "../lib/queries/getAllPosts";
import SINGLE_PAGE_QUERY_PREVIEW from "../lib/queries/singlePage";
import Newsletter from "../components/newsletter.astro";

const variables = { id: "9289" };
let singlePage: Page | null = null;

try {
  const { page } = await fetchGraphQL(SINGLE_PAGE_QUERY_PREVIEW, variables);
  singlePage = page;
} catch (error) {
  console.error("Error fetching GraphQL data:", error);
}

const organiseComments = (comments: CommentsType) => {
  const commentMap = new Map();

  // biome-ignore lint/complexity/noForEach: <explanation>
  comments?.forEach((comment) => {
    comment.replies = [];
    commentMap.set(comment.id, comment);
  });

  const topLevelComments: CommentsType = [];
  // biome-ignore lint/complexity/noForEach: <explanation>
  comments?.forEach((comment) => {
    if (comment.parentId) {
      const parent = commentMap.get(comment.parentId);
      if (parent) {
        parent.replies.push(comment);
      }
    } else {
      topLevelComments.push(comment);
    }
  });

  return topLevelComments;
};

if (!singlePage) {
  throw new Error("No single page data found");
}

const monthStats: Record<string, { name: string; total: number; count: number }> = {
  "01": { name: "January", total: 0, count: 0 },
  "02": { name: "February", total: 0, count: 0 },
  "03": { name: "March", total: 0, count: 0 },
  "04": { name: "April", total: 0, count: 0 },
  "05": { name: "May", total: 0, count: 0 },
  "06": { name: "June", total: 0, count: 0 },
  "07": { name: "July", total: 0, count: 0 },
  "08": { name: "August", total: 0, count: 0 },
  "09": { name: "September", total: 0, count: 0 },
  "10": { name: "October", total: 0, count: 0 },
  "11": { name: "November", total: 0, count: 0 },
  "12": { name: "December", total: 0, count: 0 },
};

let hasNextPage = true;
let endCursor: string | null = null;

while (hasNextPage) {
  const variables = endCursor ? { after: endCursor } : {};
  const { posts } = await fetchGraphQL(GET_ALL_POSTS, variables);

  // biome-ignore lint/complexity/noForEach: <explanation>
  posts.nodes.forEach((post: Post) => {
    const dateStr = post.date;
    const ratingStr = post.ratings?.nodes?.[0]?.name ?? "";
    const match = ratingStr.match(/[\d.]+/);
    const rating = match ? Number.parseFloat(match[0]) : null;

    if (!dateStr || !rating || Number.isNaN(rating)) return;

    const postMonth = new Date(dateStr).toISOString().slice(5, 7); // e.g. "03"
    if (!monthStats[postMonth]) return;

    monthStats[postMonth].total += rating;
    monthStats[postMonth].count += 1;
  });

  hasNextPage = posts.pageInfo.hasNextPage;
  endCursor = posts.pageInfo.endCursor;
}

const monthOrder = ["01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12"];

const monthlyAverages = monthOrder.map((month) => {
  const stats = monthStats[month];
  const average = stats.count > 0 ? +(stats.total / stats.count).toFixed(2) : null;

  return {
    month: stats.name,
    average,
    count: stats.count,
  };
});

const threadedComments = organiseComments(singlePage.comments.nodes);
---

<BaseLayout
  pageTitle={singlePage.title}
  description={singlePage?.seo?.opengraphDescription}
  opengraphImage={singlePage?.seo?.opengraphImage?.sourceUrl}
>
  <div class="image-container">
    <img
      src={singlePage?.featuredImage?.node?.sourceUrl || logo3.src}
      alt={singlePage.title}
      width={5000}
      height={5000}
      class="featured-image"
      loading="eager"
    />
    <div class="copyright-overlay">
      &copy; {new Date().getFullYear()} Roast Dinners in London. All rights reserved.
    </div>
  </div>
  <section class="post-title">
    <h2>{singlePage.title}</h2>
  </section>
  <div class="container">
    <div set:html={singlePage.content} />
    <ul>
      {
        monthlyAverages.map(({ month, average, count }) => (
          <li>
            In {month}, the average roast dinner rating is{" "}
            {average !== null ? average.toFixed(2) : "N/A"} based on {count}{" "}
            {count === 1 ? "review" : "reviews"}.
          </li>
        ))
      }
    </ul>
    <Newsletter />

    <Comments threadedComments={threadedComments} postId={singlePage.pageId} />
  </div>
</BaseLayout>
