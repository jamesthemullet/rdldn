---
import BaseLayout from "../layouts/BaseLayout.astro";
import type { Comments as CommentsType, Page, Post } from "../types";

import "../styles/post.css";
import Comments from "../components/comments.astro";
import Newsletter from "../components/newsletter.astro";
import logo3 from "../images/logo-3.png";
import { fetchGraphQL } from "../lib/api";
import GET_ALL_POSTS from "../lib/queries/getAllPosts";
import SINGLE_PAGE_QUERY_PREVIEW from "../lib/queries/singlePage";

const variables = { id: "9891" };
let singlePage: Page | null = null;

try {
  const { page } = await fetchGraphQL(SINGLE_PAGE_QUERY_PREVIEW, variables);
  singlePage = page;
} catch (error) {
  console.error("Error fetching GraphQL data:", error);
}

const organiseComments = (comments: CommentsType) => {
  const commentMap = new Map();

  // biome-ignore lint/complexity/noForEach: <explanation>
  comments?.forEach((comment) => {
    comment.replies = [];
    commentMap.set(comment.id, comment);
  });

  const topLevelComments: CommentsType = [];
  // biome-ignore lint/complexity/noForEach: <explanation>
  comments?.forEach((comment) => {
    if (comment.parentId) {
      const parent = commentMap.get(comment.parentId);
      if (parent) {
        parent.replies.push(comment);
      }
    } else {
      topLevelComments.push(comment);
    }
  });

  return topLevelComments;
};

if (!singlePage) {
  throw new Error("No single page data found");
}

const meatRatings: Record<string, number[]> = {};
let hasNextPage = true;
let endCursor: string | null = null;

while (hasNextPage) {
  const variables = endCursor ? { after: endCursor } : {};
  const { posts } = await fetchGraphQL(GET_ALL_POSTS, variables);
  console.log(10, posts);

  // biome-ignore lint/complexity/noForEach: <explanation>
  posts.nodes.forEach((post: Post) => {
    const meat = post.meats?.nodes?.[0]?.name;
    console.log(15, meat);
    const ratingStr = post.ratings?.nodes?.[0]?.name;

    if (!meat || !ratingStr) return;

    const match = ratingStr.match(/[\d.]+/);
    const rating = match ? Number.parseFloat(match[0]) : null;

    if (!rating || Number.isNaN(rating)) return;

    // biome-ignore lint/suspicious/noAssignInExpressions: <explanation>
    (meatRatings[meat] ??= []).push(rating);
  });

  hasNextPage = posts.pageInfo.hasNextPage;
  endCursor = posts.pageInfo.endCursor;
}

console.log(19, meatRatings);

const meatStats = Object.entries(meatRatings)
  .filter(([_, ratings]) => ratings.length >= 3)
  .map(([name, ratings]) => ({
    name,
    count: ratings.length,
    average: +(ratings.reduce((s, r) => s + r, 0) / ratings.length).toFixed(2),
  }))
  .sort((a, b) => b.average - a.average);

console.log(20, meatStats);

const threadedComments = organiseComments(singlePage.comments.nodes);
---

<BaseLayout
  pageTitle={singlePage.title}
  description={singlePage?.seo?.opengraphDescription}
  opengraphImage={singlePage?.seo?.opengraphImage?.sourceUrl}
>
  <div class="image-container">
    <img
      src={singlePage?.featuredImage?.node?.sourceUrl || logo3.src}
      alt={singlePage.title}
      width={5000}
      height={5000}
      class="featured-image"
      loading="eager"
    />
    <div class="copyright-overlay">
      &copy; {new Date().getFullYear()} Roast Dinners in London. All rights reserved.
    </div>
  </div>
  <section class="post-title">
    <h2>{singlePage.title}</h2>
  </section>
  <div class="container">
    <div set:html={singlePage.content} />
    <ul>
      {
        meatStats.map((meat) => (
          <li>
            The average rating for {meat.name} is {meat.average.toFixed(2)} ({meat.count}{" "}
            {meat.count === 1 ? "review" : "reviews"})
          </li>
        ))
      }
    </ul>
    <p>Only meats with at least 3 reviews are included. Vegan options not available.</p>
    <Newsletter />

    <Comments threadedComments={threadedComments} postId={singlePage.pageId} />
  </div>
</BaseLayout>
