---
import BaseLayout from '../layouts/BaseLayout.astro';
import '../styles/index.css';
import Search from '../components/search/search.astro';
import { fetchGraphQL } from '../lib/api';
import GET_BEST_ROASTS from '../lib/queries/bestRoasts';
import GET_ALL_PAGES from '../lib/queries/getAllPages';
import GET_FEATURE_POSTS from '../lib/queries/getFeaturePosts.ts';
import GET_LOCATIONS from '../lib/queries/getLocations';
import MOST_RECENT_POST_QUERY from '../lib/queries/mostRecentPost';
import OTHER_POSTS_AFTER_FIRST_QUERY from '../lib/queries/otherPostsAfterFirst';
import SINGLE_PAGE_QUERY_PREVIEW from '../lib/queries/singlePage';
import type { Location, Page, Post, Size } from '../types';

type PostWithFeaturedImage = Post & { featuredImage: string };
type PageWithFeaturedImage = Page & { featuredImage: string };

let recentPost: Post | null = null;
let recentPostCursor: string | null = null;

try {
  const data = await fetchGraphQL(MOST_RECENT_POST_QUERY);
  recentPost = data.posts.nodes[0];
  recentPostCursor = data?.posts?.pageInfo?.endCursor;

  recentPost = {
    ...recentPost,
    featuredImageUrl:
      recentPost?.featuredImage?.node?.mediaDetails?.sizes?.find((size) => size.name === 'homepage')
        ?.sourceUrl || recentPost?.featuredImage?.node?.sourceUrl,
  };
} catch (error) {
  console.error('Error fetching the most recent post:', error);
  recentPost = null;
}

let otherPosts: Post[] = [];

if (recentPostCursor) {
  try {
    const data = await fetchGraphQL(OTHER_POSTS_AFTER_FIRST_QUERY, {
      after: recentPostCursor,
    });
    otherPosts =
      data?.posts?.nodes?.map((post: Post) => ({
        ...post,
        featuredImageUrl:
          post.featuredImage?.node?.mediaDetails?.sizes?.find((size) => size.name === 'homepage')
            ?.sourceUrl || post?.featuredImage?.node?.sourceUrl,
      })) || [];
  } catch (error) {
    console.error('Error fetching other posts:', error);
  }
}

const posts = [recentPost, ...otherPosts];

const locationPageIds = ['5614', '5612', '5616', '5594'];

let locationPages: Array<PageWithFeaturedImage> = [];

try {
  const pageResponses = await Promise.all(
    locationPageIds.map((id) => fetchGraphQL(SINGLE_PAGE_QUERY_PREVIEW, { id }))
  );

  locationPages = pageResponses
    .map((response) => {
      if (!response?.page) return null;

      const featuredImage = response.page.featuredImage?.node;
      const smallImage =
        featuredImage?.mediaDetails.sizes.find((size: Size) => size.name === 'homepage')
          ?.sourceUrl || featuredImage?.sourceUrl;

      return {
        ...response.page,
        featuredImageUrl: smallImage,
      };
    })
    .filter(Boolean);
} catch (error) {
  console.error('Error fetching location pages:', error);
}

const allLocations: Location[] = [];

try {
  const locations = await fetchGraphQL(GET_LOCATIONS);

  if (locations?.areas?.nodes) {
    allLocations.push(...locations.areas.nodes);
  }

  if (locations?.boroughs?.nodes) {
    allLocations.push(...locations.boroughs.nodes);
  }
} catch (error) {
  console.error('Error fetching location pages:', error);
}

let bestRoasts: Post[] = [];

try {
  const response = await fetchGraphQL(GET_BEST_ROASTS);
  bestRoasts = response?.posts?.nodes
    ?.map((post: Post) => {
      const featuredImage = post.featuredImage?.node;
      const smallImage =
        featuredImage?.mediaDetails?.sizes.find((size: Size) => size.name === 'homepage')
          ?.sourceUrl || featuredImage?.sourceUrl;

      return {
        ...post,
        featuredImageUrl: smallImage,
      };
    })
    .filter(Boolean);
  bestRoasts = bestRoasts.sort(() => Math.random() - 0.5).slice(0, 4);
} catch (error) {
  console.error('Error fetching best roasts:', error);
}

let allPages: Page[] = [];
let allFeaturesPages: Page[] = [];
let allRoastStatisticsPages: Page[] = [];
let features: Array<PostWithFeaturedImage | PageWithFeaturedImage> = [];
let roastStatistics: Array<PostWithFeaturedImage | PageWithFeaturedImage> = [];

try {
  const response = await fetchGraphQL(GET_ALL_PAGES);
  allPages = response?.pages?.nodes
    ?.map((page: Page) => {
      const featuredImage = page.featuredImage?.node;
      const smallImage =
        featuredImage?.mediaDetails?.sizes.find((size: Size) => size.name === 'homepage')
          ?.sourceUrl || featuredImage?.sourceUrl;

      return {
        ...page,
        featuredImageUrl: smallImage,
      };
    })
    .filter(Boolean);

  allFeaturesPages = allPages.filter((page: Page) => page?.highlights?.tag === 'feature');
  allRoastStatisticsPages = allPages.filter(
    (page: Page) => page?.highlights?.tag === 'roastatistics'
  );

  // biome-ignore lint/complexity/noForEach: <explanation>
  allFeaturesPages.forEach((page: Page) => {
    const featuredImage = page.featuredImage?.node?.sourceUrl || '';
    features.push({
      ...page,
      featuredImage,
    } as PageWithFeaturedImage);
  });

  // biome-ignore lint/complexity/noForEach: <explanation>
  allRoastStatisticsPages.forEach((page: Page) => {
    const featuredImage = page.featuredImage?.node?.sourceUrl || '';
    roastStatistics.push({
      ...page,
      featuredImage,
    } as PageWithFeaturedImage);
  });

  const postsResponse = await fetchGraphQL(GET_FEATURE_POSTS);

  features.push(
    ...postsResponse.posts.edges.map((edge: { node: Post }) => ({
      ...edge.node,
      featuredImageUrl:
        edge.node.featuredImage?.node?.mediaDetails?.sizes?.find(
          (size: Size) => size.name === 'homepage'
        )?.sourceUrl || edge.node.featuredImage?.node?.sourceUrl,
    }))
  );

  features = features.sort(() => Math.random() - 0.5).slice(0, 4);

  roastStatistics = roastStatistics.sort(() => Math.random() - 0.5).slice(0, 3);
} catch (error) {
  console.error('Error fetching features data:', error);
}

try {
  const response = await fetchGraphQL(SINGLE_PAGE_QUERY_PREVIEW, {
    id: '4102',
  });
  roastStatistics.unshift({
    ...response.page,
    featuredImageUrl:
      response.page.featuredImage?.node?.mediaDetails?.sizes?.find(
        (size: Size) => size.name === 'homepage'
      )?.sourceUrl || response.page.featuredImage?.node?.sourceUrl,
  } as PageWithFeaturedImage);
} catch (error) {
  console.error('Error fetching features data:', error);
}
---

<BaseLayout
  pageTitle="Home of Roast Dinners In London"
  description="Lord Gravy bringing you a guide to the best and worst roast dinners in London."
  openGraphImage={recentPost?.seo?.opengraphImage?.sourceUrl}
>
  <section class="home-list">
    <h2>Latest Reviews:</h2>
    <ul>
      {
        posts.map((post, index) => (
          <li class="heading">
            <h3>
              <a href={post?.slug} rel="noopener noreferrer">
                <Fragment set:html={post?.title} />
              </a>
            </h3>
            <a href={post?.slug} rel="noopener noreferrer" class="featured-image">
              <img
                src={post?.featuredImageUrl}
                alt={`Photo of the roast dinner at ${post?.title}`}
                width="400"
                height="300"
                loading={index === 0 ? 'eager' : 'lazy'}
              />
            </a>
          </li>
        ))
      }
    </ul>
  </section>
  <section class="home-list">
    <h2>Roast By Location:</h2>
    <ul>
      {
        locationPages.map((page) => (
          <li class="heading">
            <h3>
              <a href={page?.slug} rel="noopener noreferrer">
                <Fragment set:html={page?.title} />
              </a>
            </h3>
            <a href={page?.slug} rel="noopener noreferrer">
              <img
                src={page?.featuredImageUrl}
                alt={`Photo of the roast dinner at ${page?.title}`}
                width={400}
                height={300}
                loading="lazy"
              />
            </a>
          </li>
        ))
      }
    </ul>
  </section>
  <section class="home-list preferred-locations">
    <p>
      Select your preferred location from the list below and we'll highlight appropriate reviews to
      you in the future.
    </p>

    <div class="custom-select">
      <button class="dropdown-btn" id="dropdown-btn">Select Locations</button>
      <div class="dropdown-content">
        {
          allLocations.map((location) => (
            <label class="dropdown-item">
              <input
                type="checkbox"
                value={location.slug}
                class="hidden-checkbox location-checkbox"
                data-location={location.slug}
              />
              <span>{location.name}</span>
            </label>
          ))
        }
      </div>
    </div>
    <div id="selected-locations">
      <p>Your selected locations:</p>
      <ul id="selected-locations-list"></ul>
    </div>
  </section>

  <section>
    <h2>Search:</h2>
    <Search />
  </section>
  <section class="home-list">
    <h2>A few of the best roasts:</h2>
    <ul>
      {
        bestRoasts.map((post, index) => (
          <li class="heading">
            <h3>
              <a href={post?.slug} rel="noopener noreferrer">
                <Fragment set:html={post?.title} />
              </a>
            </h3>
            <a href={post?.slug} rel="noopener noreferrer" class="featured-image">
              <img
                src={post?.featuredImageUrl}
                alt={`Photo of the roast dinner at ${post?.title}`}
                width="400"
                height="300"
                loading={index === 0 ? 'eager' : 'lazy'}
              />
            </a>
            <p>Rating: {post?.ratings?.nodes[0]?.name}</p>
            <p>Year Visited: {post?.yearsOfVisit?.nodes[0]?.name}</p>
          </li>
        ))
      }
    </ul>
  </section>
  <section class="home-list">
    <h2>Features:</h2>
    <ul>
      {
        features.map((post, index) => (
          <li class="heading">
            <h3>
              <a href={post?.slug} rel="noopener noreferrer">
                <Fragment set:html={post?.title} />
              </a>
            </h3>
            <a href={post?.slug} rel="noopener noreferrer" class="featured-image">
              <img
                src={post?.featuredImageUrl}
                alt={`Photo of the roast dinner at ${post?.title}`}
                width="400"
                height="300"
                loading={index === 0 ? 'eager' : 'lazy'}
              />
            </a>
          </li>
        ))
      }
    </ul>
  </section>
  <section class="home-list">
    <h2>Roastatistics:</h2>
    <ul>
      {
        roastStatistics.map((post, index) => (
          <li class="heading">
            <h3>
              <a href={post?.slug} rel="noopener noreferrer">
                <Fragment set:html={post?.title} />
              </a>
            </h3>
            <a href={post?.slug} rel="noopener noreferrer" class="featured-image">
              <img
                src={post?.featuredImageUrl}
                alt={`Photo of the roast dinner at ${post?.title}`}
                width="400"
                height="300"
                loading={index === 0 ? 'eager' : 'lazy'}
              />
            </a>
          </li>
        ))
      }
    </ul>
  </section>
  <script>
    document.addEventListener('DOMContentLoaded', function () {
      const dropdownButton = document.getElementById('dropdown-btn');
      const dropdownContent = document.querySelector('.dropdown-content');
      const locationCheckboxes = document.querySelectorAll('.location-checkbox');
      const selectedLocationsList = document.getElementById('selected-locations-list');

      const savedLocations = JSON.parse(localStorage.getItem('selectedLocations') || '[]') || [];
      locationCheckboxes.forEach((checkbox) => {
        if (savedLocations.includes((checkbox as HTMLInputElement).value)) {
          (checkbox as HTMLInputElement).checked = true;
        }
      });

      const capitaliseAndRemoveHyphen = (string: string) => {
        return string
          .split('-')
          .map((word) => word.charAt(0).toUpperCase() + word.slice(1))
          .join(' ');
      };

      displaySelectedLocations(savedLocations);

      if (dropdownButton) {
        dropdownButton.addEventListener('click', function () {
          if (dropdownContent) {
            dropdownContent.classList.toggle('open');
          }
        });
      }

      locationCheckboxes.forEach((checkbox) => {
        checkbox.addEventListener('change', function () {
          updateSelectedLocations();
        });
      });

      function updateSelectedLocations() {
        const selectedLocations = Array.from(locationCheckboxes)
          .filter((checkbox) => (checkbox as HTMLInputElement).checked)
          .map((checkbox) => (checkbox as HTMLInputElement).value);

        console.log('Selected Locations:', selectedLocations);

        localStorage.setItem('selectedLocations', JSON.stringify(selectedLocations));

        displaySelectedLocations(selectedLocations);
      }

      function displaySelectedLocations(locations: string[]) {
        if (selectedLocationsList) {
          selectedLocationsList.innerHTML = '';
        }
        if (locations.length === 0) {
          if (selectedLocationsList) {
            selectedLocationsList.innerHTML = '<li>No locations selected</li>';
          }
        } else {
          locations.forEach((location) => {
            const listItem = document.createElement('li');
            listItem.textContent = capitaliseAndRemoveHyphen(location);
            if (selectedLocationsList) {
              selectedLocationsList.appendChild(listItem);
            }
          });
        }
      }
    });
  </script>
</BaseLayout>
