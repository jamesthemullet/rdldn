---
import BaseLayout from "../layouts/BaseLayout.astro";
import type { Comments as CommentsType, Page, Post } from "../types";

import "../styles/post.css";
import Comments from "../components/comments.astro";
import Newsletter from "../components/newsletter.astro";
import logo3 from "../images/logo-3.png";
import { fetchGraphQL } from "../lib/api";
import GET_ALL_POSTS from "../lib/queries/getAllPosts";
import SINGLE_PAGE_QUERY_PREVIEW from "../lib/queries/singlePage";

const variables = { id: "8441" };
let singlePage: Page | null = null;

try {
  const { page } = await fetchGraphQL(SINGLE_PAGE_QUERY_PREVIEW, variables);
  singlePage = page;
} catch (error) {
  console.error("Error fetching GraphQL data:", error);
}

const organiseComments = (comments: CommentsType) => {
  const commentMap = new Map();

  // biome-ignore lint/complexity/noForEach: <explanation>
  comments?.forEach((comment) => {
    comment.replies = [];
    commentMap.set(comment.id, comment);
  });

  const topLevelComments: CommentsType = [];
  // biome-ignore lint/complexity/noForEach: <explanation>
  comments?.forEach((comment) => {
    if (comment.parentId) {
      const parent = commentMap.get(comment.parentId);
      if (parent) {
        parent.replies.push(comment);
      }
    } else {
      topLevelComments.push(comment);
    }
  });

  return topLevelComments;
};

if (!singlePage) {
  throw new Error("No single page data found");
}

const ownerScores: Record<string, { total: number; count: number }> = {};

let hasNextPage = true;
let endCursor: string | null = null;

while (hasNextPage) {
  const variables = endCursor ? { after: endCursor } : {};
  const { posts } = await fetchGraphQL(GET_ALL_POSTS, variables);

  // biome-ignore lint/complexity/noForEach: <explanation>
  posts.nodes.forEach((post: Post) => {
    const rating = Number.parseFloat(post.ratings?.nodes?.[0]?.name || "NaN");
    const owners = post.owners?.nodes?.map((o) => o.name) ?? [];

    if (Number.isNaN(rating) || !owners.length) return;

    // biome-ignore lint/complexity/noForEach: <explanation>
    owners.forEach((owner) => {
      if (owner.toLowerCase() === "independent") return;

      if (!ownerScores[owner]) {
        ownerScores[owner] = { total: 0, count: 0 };
      }

      ownerScores[owner].total += rating;
      ownerScores[owner].count += 1;
    });
  });

  hasNextPage = posts.pageInfo.hasNextPage;
  endCursor = posts.pageInfo.endCursor;
}

// Final array, filtered to owners with 2+ visits, sorted descending
const chainStats = Object.entries(ownerScores)
  .filter(([_, stats]) => stats.count > 1)
  .map(([name, stats]) => ({
    name,
    count: stats.count,
    average: +(stats.total / stats.count).toFixed(2),
  }))
  .sort((a, b) => b.average - a.average);

const threadedComments = organiseComments(singlePage.comments.nodes);
---

<BaseLayout
  pageTitle={singlePage.title}
  description={singlePage?.seo?.opengraphDescription}
  opengraphImage={singlePage?.seo?.opengraphImage?.sourceUrl}
>
  <div class="image-container">
    <img
      src={singlePage?.featuredImage?.node?.sourceUrl || logo3.src}
      alt={singlePage.title}
      width={5000}
      height={5000}
      class="featured-image"
      loading="eager"
    />
    <div class="copyright-overlay">
      &copy; {new Date().getFullYear()} Roast Dinners in London. All rights reserved.
    </div>
  </div>
  <section class="post-title">
    <h2>{singlePage.title}</h2>
  </section>
  <div class="container">
    <div set:html={singlePage.content} />
    <ul>
      {
        chainStats.map((chain) => (
          <li>
            {chain.name} â€“ {chain.average.toFixed(2)} ({chain.count} visits)
          </li>
        ))
      }
    </ul>

    <Newsletter />
    <Comments threadedComments={threadedComments} postId={singlePage.pageId} />
  </div>
</BaseLayout>
