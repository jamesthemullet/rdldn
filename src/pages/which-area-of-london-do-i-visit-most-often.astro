---
import BaseLayout from "../layouts/BaseLayout.astro";
import type { Comments as CommentsType, Page, Post } from "../types";

import "../styles/post.css";
import Comments from "../components/comments.astro";
import logo3 from "../images/logo-3.png";
import { fetchGraphQL } from "../lib/api";
import GET_ALL_POSTS from "../lib/queries/getAllPosts";
import SINGLE_PAGE_QUERY_PREVIEW from "../lib/queries/singlePage";
import Newsletter from "../components/newsletter.astro";

const variables = { id: "8297" };
let singlePage: Page | null = null;

try {
  const { page } = await fetchGraphQL(SINGLE_PAGE_QUERY_PREVIEW, variables);
  singlePage = page;
} catch (error) {
  console.error("Error fetching GraphQL data:", error);
}

const organiseComments = (comments: CommentsType) => {
  const commentMap = new Map();

  // biome-ignore lint/complexity/noForEach: <explanation>
  comments?.forEach((comment) => {
    comment.replies = [];
    commentMap.set(comment.id, comment);
  });

  const topLevelComments: CommentsType = [];
  // biome-ignore lint/complexity/noForEach: <explanation>
  comments?.forEach((comment) => {
    if (comment.parentId) {
      const parent = commentMap.get(comment.parentId);
      if (parent) {
        parent.replies.push(comment);
      }
    } else {
      topLevelComments.push(comment);
    }
  });

  return topLevelComments;
};

if (!singlePage) {
  throw new Error("No single page data found");
}

const areaCountsByYear = new Map<string, Record<string, number>>();
const totalAreaCounts: Record<string, number> = {};

let hasNextPage = true;
let endCursor: string | null = null;

while (hasNextPage) {
  const variables = endCursor ? { after: endCursor } : {};
  const { posts } = await fetchGraphQL(GET_ALL_POSTS, variables);

  // biome-ignore lint/complexity/noForEach: <explanation>
  posts.nodes.forEach((post: Post) => {
    const year = post.yearsOfVisit?.nodes[0]?.name;
    const areas = post.areas?.nodes.map((a) => a.name);

    if (!year || !areas?.length) return;

    if (!areaCountsByYear.has(year)) {
      areaCountsByYear.set(year, {});
    }

    // biome-ignore lint/style/noNonNullAssertion: <explanation>
    const yearMap = areaCountsByYear.get(year)!;

    // biome-ignore lint/complexity/noForEach: <explanation>
    areas.forEach((area) => {
      yearMap[area] = (yearMap[area] || 0) + 1;
      totalAreaCounts[area] = (totalAreaCounts[area] || 0) + 1;
    });
  });

  hasNextPage = posts.pageInfo.hasNextPage;
  endCursor = posts.pageInfo.endCursor;
}

const preferredOrder = [
  "Central London",
  "North London",
  "West London",
  "East London",
  "South London",
];

const threadedComments = organiseComments(singlePage.comments.nodes);
---

<BaseLayout
  pageTitle={singlePage.title}
  description={singlePage?.seo?.opengraphDescription}
  opengraphImage={singlePage?.seo?.opengraphImage?.sourceUrl}
>
  <div class="image-container">
    <img
      src={singlePage?.featuredImage?.node?.sourceUrl || logo3.src}
      alt={singlePage.title}
      width={5000}
      height={5000}
      class="featured-image"
      loading="eager"
    />
    <div class="copyright-overlay">
      &copy; {new Date().getFullYear()} Roast Dinners in London. All rights reserved.
    </div>
  </div>
  <section class="post-title">
    <h2>{singlePage.title}</h2>
  </section>
  <div class="container">
    <div set:html={singlePage.content} />

    {
      Array.from(areaCountsByYear.entries())
        .sort(([a], [b]) => parseInt(a) - parseInt(b)) // Sort by year
        .map(([year, areas]) => {
          const sortedAreas: [string, number][] = [];

          preferredOrder.forEach((area) => {
            if (areas[area]) sortedAreas.push([area, areas[area]]);
          });

          return (
            <ul>
              <>
                <strong>{year}:</strong>
                <br />
              </>
              {sortedAreas.map(([area, count]) => (
                <li>
                  {area}: {count} roast{count === 1 ? "" : "s"}
                  <br />
                </li>
              ))}
              <br />
            </ul>
          );
        })
    }

    <hr />
    <h4>Total visits by area across all years</h4>
    <ul>
      {
        preferredOrder.map((area) =>
          totalAreaCounts[area] ? (
            <li>
              {area}: {totalAreaCounts[area]} roast{totalAreaCounts[area] === 1 ? "" : "s"}
            </li>
          ) : null
        )
      }
    </ul>

    <Newsletter />

    <Comments threadedComments={threadedComments} postId={singlePage.pageId} />
  </div>
</BaseLayout>
