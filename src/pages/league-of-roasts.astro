---
import BaseLayout from "../layouts/BaseLayout.astro";
import type { Comments as CommentsType, Page, Post } from "../types";

import "../styles/post.css";
import Comments from "../components/comments.astro";
import Newsletter from "../components/newsletter.astro";
import SortPosts from "../components/sortPosts.tsx";
import logo3 from "../images/logo-3.png";
import { fetchGraphQL } from "../lib/api";
import GET_ALL_POSTS from "../lib/queries/getAllPosts";
import SINGLE_PAGE_QUERY_PREVIEW from "../lib/queries/singlePage";

const variables = { id: "267" };
let singlePage: Page | null = null;

try {
  const { page } = await fetchGraphQL(SINGLE_PAGE_QUERY_PREVIEW, variables);
  singlePage = page;
} catch (error) {
  console.error("Error fetching GraphQL data:", error);
}

const organiseComments = (comments: CommentsType) => {
  const commentMap = new Map();

  // biome-ignore lint/complexity/noForEach: <explanation>
  comments?.forEach((comment) => {
    comment.replies = [];
    commentMap.set(comment.id, comment);
  });

  const topLevelComments: CommentsType = [];
  // biome-ignore lint/complexity/noForEach: <explanation>
  comments?.forEach((comment) => {
    if (comment.parentId) {
      const parent = commentMap.get(comment.parentId);
      if (parent) {
        parent.replies.push(comment);
      }
    } else {
      topLevelComments.push(comment);
    }
  });

  return topLevelComments;
};

if (!singlePage) {
  throw new Error("No single page data found");
}

const allRoastPosts: Post[] = [];

let hasNextPage = true;
let endCursor: string | null = null;

while (hasNextPage) {
  const variables = endCursor ? { after: endCursor } : {};
  const { posts } = await fetchGraphQL(GET_ALL_POSTS, variables);

  allRoastPosts.push(
    ...posts.nodes.filter((post: Post) =>
      post.typesOfPost?.nodes.some((node: { name: string }) => node.name === "Roast Dinner")
    )
  );
  hasNextPage = posts.pageInfo.hasNextPage;
  endCursor = posts.pageInfo.endCursor;
}

const threadedComments = organiseComments(singlePage.comments.nodes);
---

<BaseLayout
  pageTitle={singlePage.title}
  description={singlePage?.seo?.opengraphDescription}
  opengraphImage={singlePage?.seo?.opengraphImage?.sourceUrl}
>
  <div class="image-container">
    <img
      src={singlePage?.featuredImage?.node?.sourceUrl || logo3.src}
      alt={singlePage.title}
      width={5000}
      height={5000}
      class="featured-image"
      loading="eager"
    />
    <div class="copyright-overlay">
      &copy; {new Date().getFullYear()} Roast Dinners in London. All rights reserved.
    </div>
  </div>
  <section class="post-title">
    <h2>{singlePage.title}</h2>
  </section>
  <div class="container league-container">
    <div set:html={singlePage.content} />

    <div class="sort-posts-loading" id="sort-posts-loading">
      <div class="loading-content">
        <div class="loading-spinner"></div>
        <p>Loading the league of roasts...</p>
      </div>
    </div>

    <div class="sort-posts-container" style="opacity: 0; position: absolute; visibility: hidden;">
      <SortPosts client:visible posts={allRoastPosts} />
    </div>

    <script>
      document.addEventListener("DOMContentLoaded", () => {
        let attempts = 0;
        const maxAttempts = 20; // 2 seconds max

        const checkForComponent = () => {
          attempts++;
          const sortPostsElement = document.querySelector(".sort-posts-container > div");
          const loadingElement = document.getElementById("sort-posts-loading") as HTMLElement;
          const containerElement = document.querySelector(".sort-posts-container") as HTMLElement;

          if (sortPostsElement && loadingElement && containerElement) {
            loadingElement.style.display = "none";
            containerElement.style.position = "static";
            containerElement.style.visibility = "visible";
            containerElement.style.opacity = "1";
            containerElement.style.transition = "opacity 0.2s ease-in-out";
            return;
          }

          if (attempts < maxAttempts) {
            setTimeout(checkForComponent, 100);
          } else {
            if (loadingElement) {
              loadingElement.style.display = "none";
            }
            if (containerElement) {
              containerElement.style.position = "static";
              containerElement.style.visibility = "visible";
              containerElement.style.opacity = "1";
            }
            console.log("Fallback: showing component anyway");
          }
        };

        checkForComponent();
      });
    </script>

    <Newsletter />
    <Comments threadedComments={threadedComments} postId={singlePage.pageId} />
  </div>
</BaseLayout>
