---
import { Image } from "astro:assets";
import RoastMap from '../components/roast-map.tsx';
import BaseLayout from "../layouts/BaseLayout.astro";
import type { Comments as CommentsType, Page, Post } from "../types";

import "../styles/post.css";
import Comments from "../components/comments.astro";
import logo3 from "../images/logo-3.png";
import { fetchGraphQL } from "../lib/api";
import GET_ALL_POST_LOCATIONS from "../lib/queries/getAllPostLocations";
import SINGLE_PAGE_QUERY_PREVIEW from "../lib/queries/singlePage";

const variables = { id: "631" };
let singlePage: Page | null = null;
let allPosts: Post[] = [];

try {
  const { page } = await fetchGraphQL(SINGLE_PAGE_QUERY_PREVIEW, variables);
  singlePage = page;
} catch (error) {
  console.error("Error fetching GraphQL data:", error);
}

try {
  let after = null;
  let hasNextPage = true;

  while (hasNextPage) {
    const { posts } = await fetchGraphQL(GET_ALL_POST_LOCATIONS, { after });
    
    allPosts = allPosts.concat(posts.nodes);
    
    hasNextPage = posts.pageInfo.hasNextPage;
    after = posts.pageInfo.endCursor;
  }
  console.log(100, allPosts.length, "posts fetched");

} catch (error) {
  console.error("Error fetching GraphQL data:", error);
}

const organiseComments = (comments: CommentsType) => {
  const commentMap = new Map();

  // biome-ignore lint/complexity/noForEach: <explanation>
  comments?.forEach((comment) => {
    comment.replies = [];
    commentMap.set(comment.id, comment);
  });

  const topLevelComments: CommentsType = [];
  // biome-ignore lint/complexity/noForEach: <explanation>
  comments?.forEach((comment) => {
    if (comment.parentId) {
      const parent = commentMap.get(comment.parentId);
      if (parent) {
        parent.replies.push(comment);
      }
    } else {
      topLevelComments.push(comment);
    }
  });

  return topLevelComments;
};

if (!singlePage) {
  throw new Error("No single page data found");
}


const threadedComments = organiseComments(singlePage.comments.nodes);

const markers = allPosts
  .filter(post => post?.location?.latitude && post?.location?.longitude)
  .map(post => ({
    // biome-ignore lint/style/noNonNullAssertion: <we are filtering out posts without location>
    lat: Number.parseFloat(post.location!.latitude),
    // biome-ignore lint/style/noNonNullAssertion: <we are filtering out posts without location>
    lng: Number.parseFloat(post.location!.longitude),
    label: post.title,
    rating: Number(post.ratings?.nodes[0]?.name),
    
  }));



---

<BaseLayout pageTitle={singlePage.title} description={singlePage?.seo?.opengraphDescription}>
  <div class="image-container">
    <img
      src={singlePage?.featuredImage?.node?.sourceUrl || logo3.src}
      alt={singlePage.title}
      width={5000}
      height={5000}
      class="featured-image"
      loading="eager"
    />
    <div class="copyright-overlay">
      &copy; {new Date().getFullYear()} Roast Dinners in London. All rights reserved.
    </div>
  </div>
  <section class="post-title">
    <h2>{singlePage.title}</h2>
  </section>
  <div class="container">
    <div>
    <RoastMap client:only="react" markers={markers} />

    <Comments threadedComments={threadedComments} postId={singlePage.pageId} />
  </div>
</BaseLayout>
