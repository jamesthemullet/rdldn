---
import BaseLayout from "../layouts/BaseLayout.astro";
import type { Comments as CommentsType } from "../types";

    import "../styles/post.css";
import Comments from "../components/comments.astro";
import Newsletter from "../components/newsletter.astro";
import RoastByTagSection from "../components/roastByTagSection/roast-by-tag-section.astro";
import logo3 from "../images/logo-3.png";

export async function getStaticPaths() {
  const allPosts = [];
  const allPages = [];
  let hasNextPage = true;
  let endCursor = null;

  // Fetch all posts
  while (hasNextPage) {
    const response: Response = await fetch(
      "https://rdldn.co.uk/graphql",
      {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          query: `
          query AllSlugs($first: Int!, $after: String) {
            posts(first: $first, after: $after) {
              nodes {
                slug
              }
              pageInfo {
                hasNextPage
                endCursor
              }
            }
          }
        `,
          variables: {
            first: 100,
            after: endCursor,
          },
        }),
      }
    );

    const { data } = await response.json();
    const posts = data.posts.nodes;
    allPosts.push(...posts);

    hasNextPage = data.posts.pageInfo.hasNextPage;
    endCursor = data.posts.pageInfo.endCursor;
  }

  // Fetch all pages
  hasNextPage = true;
  endCursor = null;
  
  while (hasNextPage) {
    const response: Response = await fetch(
      "https://rdldn.co.uk/graphql",
      {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          query: `
          query AllPageSlugs($first: Int!, $after: String) {
            pages(first: $first, after: $after) {
              nodes {
                slug
              }
              pageInfo {
                hasNextPage
                endCursor
              }
            }
          }
        `,
          variables: {
            first: 100,
            after: endCursor,
          },
        }),
      }
    );

    const { data } = await response.json();
    const pages = data.pages.nodes;
    allPages.push(...pages);

    hasNextPage = data.pages.pageInfo.hasNextPage;
    endCursor = data.pages.pageInfo.endCursor;
  }

  const postPaths = allPosts.map((post) => ({
    params: { slug: post.slug },
    props: { contentType: 'post' }
  }));

  const pagePaths = allPages.map((page) => ({
    params: { slug: page.slug },
    props: { contentType: 'page' }
  }));

  return [...postPaths, ...pagePaths];
}

    const { slug } = Astro.params;
    const { contentType } = Astro.props;

const singleResponse = await fetch("https://www.rdldn.co.uk/graphql", {
  method: "POST",
  headers: { "Content-Type": "application/json" },
  body: JSON.stringify({
    query: contentType === 'page' ? `
        query SinglePage($id: ID = "${slug}") {
          page(idType: URI, id: $id) {
            pageId
            date
            content
            title
            featuredImage {
              node {
                sourceUrl
              }
            }
            seo {
              opengraphTitle
              opengraphDescription
              opengraphSiteName
              opengraphImage {
                uri
                altText
                mediaDetails {
                  file
                  height
                  width
                }
                mediaItemUrl
                sourceUrl
                srcSet
              }
            }
            comments(where: { order: DESC }) {
              nodes {
                id
                content
                parentId
                author {
                  node {
                    name
                  }
                }
                date
              }
            }
          }
        }
        ` : `
        query SinglePost($id: ID = "${slug}") {
          post(idType: SLUG, id: $id) {
            postId
            date
            content
            title
            featuredImage {
              node {
                sourceUrl
              }
            }
            seo {
              opengraphTitle
              opengraphDescription
              opengraphSiteName
              opengraphImage {
                uri
                altText
                mediaDetails {
                  file
                  height
                  width
                }
                mediaItemUrl
                sourceUrl
                srcSet
              }
            }
            areas {
              nodes {
                name
              }
            }
            boroughs {
              nodes {
                name
              }
            }
            tubeStations {
              nodes {
                name
              }
            }
            tubeLines {
              nodes {
                name
              }
            }
            prices {
              nodes {
                name
              }
            }
            ratings {
              nodes {
                name
              }
            }
            yearsOfVisit {
              nodes {
                name
              }
            }
            typesOfPost {
              nodes {
                name
              }
            }
            closedDowns {
              nodes {
                name
              }
            }
            nSFWs {
              nodes {
                name
              }
            }
            highlights {
              loathed
              loved
              website
              locationPost
              instagram
            }
            comments(where: { order: DESC }) {
              nodes {
                id
                content
                parentId
                author {
                  node {
                    name
                  }
                }
                date
              }
            }
          }
        }
        `,
  }),
});

const { data } = await singleResponse.json();

const singlePost = contentType === 'page' ? data.page : data.post;

const organiseComments = (comments: CommentsType) => {
  const commentMap = new Map();

  // biome-ignore lint/complexity/noForEach: <explanation>
  comments?.forEach((comment) => {
    comment.replies = [];
    commentMap.set(comment.id, comment);
  });

  const topLevelComments: CommentsType = [];
  // biome-ignore lint/complexity/noForEach: <explanation>
  comments?.forEach((comment) => {
    if (comment.parentId) {
      const parent = commentMap.get(comment.parentId);
      if (parent) {
        parent.replies.push(comment);
      }
    } else {
      topLevelComments.push(comment);
    }
  });

  return topLevelComments;
};

const getClosedMessage = () => {
  const closedDownId = singlePost.closedDowns?.nodes[0]?.name;


  if (!closedDownId) return '';
  
  if (closedDownId === "closeddown") {
    return "Closed Down";
  }
  if (closedDownId === "newmanagement") {
    return "Under New Management";
  }
  if (closedDownId === "newowners") {
    return "Under New Owners";
  }
  if (closedDownId === "popupmoved") {
    return "Popup Now Trading Elsewhere";
  }
  if (closedDownId === "popupstopped") {
    return "Popup Stopped Trading";
  }
  if (closedDownId === "tempclosed") {
    return "Temporarily Closed";
  }
  if (closedDownId.includes("re-reviewed")) {
    return `Re-reviewed: ${closedDownId.replace("re-reviewed-", "").trim()}`;
  }
  return 'Closed Down'
};

const currentYear = new Date().getFullYear();
const postYear = new Date(singlePost.date).getFullYear();
const postMoreThanTwoYearsOld = postYear < currentYear - 2;

const threadedComments = organiseComments(contentType === 'page' ? data.page.comments.nodes : data.post.comments.nodes);
---

<BaseLayout
  pageTitle={singlePost.title}
  description={singlePost?.seo?.opengraphDescription}
  opengraphImage={singlePost.seo?.opengraphImage?.sourceUrl}
  halloween={singlePost.typesOfPost?.nodes?.some((node: { name: string }) => node.name === "Halloween") ? true : false}
>
  <div class="image-container">
    <img
      src={singlePost.featuredImage?.node?.sourceUrl || logo3}
      alt={singlePost.title}
      width={5000}
      height={5000}
      class="featured-image"
      loading="eager"
    />
    {singlePost.closedDowns?.nodes?.length > 0 && (
      <div class="closed-overlay">
        {getClosedMessage()}
      </div>
    )}
    <div class="copyright-overlay">
      &copy; {new Date().getFullYear()} Roast Dinners in London. All rights reserved.
    </div>
  </div>
  <section class="post-title">
    <h2>{singlePost.title}</h2>
    <p>
      Published: {
        new Date(singlePost.date).toLocaleDateString("en-UK", {
          year: "numeric",
          month: "long",
          day: "numeric",
        })
      }
    </p>
  </section>
  <div class="container">
    {contentType === 'post' && (
      <>
        <button
          class="skip"
          onclick="
            const el = document.getElementById('summary');
            if (el) {
              const y = el.getBoundingClientRect().top + window.pageYOffset - 120;
              window.scrollTo({ top: y, behavior: 'smooth' });
            }
          "
        >
          Skip The Nonsense
        </button>
        {postMoreThanTwoYearsOld && (
          <p class="warning">
            This post is from {postYear}. Maybe check some other reviews on Google Maps or something before booking.  But definitely read this one first.  Or else.
          </p>
        )}
        { singlePost.nSFWs?.nodes?.length > 0 && (
          <p class="nsfw">
            NSFW: Warning - this review may not be safe for work due to {singlePost.nSFWs.nodes.map((nsfw: { name: string}) => nsfw.name).join(", ")}.
          </p>
        )}
      </>
    )}
    
    <div set:html={singlePost.content} />

    <Newsletter />
    
    {contentType === 'post' && singlePost.typesOfPost?.nodes?.some((node: { name: string }) => node.name === "Roast Dinner") && (
    <section id="summary" class="summary">
              <h3>Summary:</h3>

      {singlePost.closedDowns?.nodes?.length > 0 && (
        <p class="closed-message">
          {getClosedMessage()}
        </p>
      )}
        <p>{singlePost.title}</p>
      <p class={singlePost.closedDowns?.nodes?.[0]?.name?.startsWith("re-reviewed") ? "re-reviewed-rating" : ""}>
        Rating: {singlePost.ratings?.nodes?.[0]?.name}
      </p>
      {singlePost.tubeStations?.nodes?.[0]?.name && <p>Tube Station: {singlePost.tubeStations.nodes[0]?.name}</p> }
              <p>
        Tube Lines:{" "}
        {singlePost.tubeLines?.nodes
          ?.map((line: { name: string }) => line.name)
          .join(", ")}
      </p>
      <p>Price (in {singlePost.yearsOfVisit?.nodes?.[0]?.name}): {singlePost.prices?.nodes?.[0]?.name}</p>
      <p>Year of Visit: {singlePost.yearsOfVisit?.nodes?.[0]?.name}</p>
    </section>
    <section>
      <h3>Loved & Loathed:</h3>
      <p>Loved: {singlePost.highlights?.loved}</p>
      <p>Loathed: {singlePost.highlights?.loathed}</p>
    </section>
    <section>
      {singlePost.closedDowns?.nodes?.length === 0 && (
        <>
          <h3>Get Booking:</h3>
          {singlePost.highlights?.website && (
            <p>
              <a href={singlePost.highlights.website}>
                Book {singlePost.title}
              </a>
            </p>
          )}
          {singlePost.highlights?.instagram && (
            <p>
              <a href={singlePost.highlights.instagram}>
                Follow on Instagram
              </a>
            </p>
          )}
        </>
      )}
    </section>
    <RoastByTagSection
      type="location"
      tag={singlePost.boroughs?.nodes?.[0]?.name?.replace(/\s+/g, "-")}
    />

    <Comments threadedComments={threadedComments} postId={singlePost.postId} />

    )}

    {contentType === 'page' && (
      <Comments threadedComments={threadedComments} postId={singlePost.pageId} />
    )}
  </div>
</BaseLayout>
