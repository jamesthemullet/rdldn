---
import { Image } from "astro:assets";
import BaseLayout from "../layouts/BaseLayout.astro";
import type { Comments as CommentsType } from "../types";

    import "../styles/post.css";
import Comments from "../components/comments.astro";
import RoastByTagSection from "../components/roastByTagSection/roast-by-tag-section.astro";

export async function getStaticPaths() {
  const allPosts = [];
  let hasNextPage = true;
  let endCursor = null;

  while (hasNextPage) {
    const response: Response = await fetch(
      "https://rdldn.co.uk/graphql",
      {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          query: `
          query AllSlugs($first: Int!, $after: String) {
            posts(first: $first, after: $after) {
              nodes {
                slug
              }
              pageInfo {
                hasNextPage
                endCursor
              }
            }
          }
        `,
          variables: {
            first: 100,
            after: endCursor,
          },
        }),
      }
    );

    const { data } = await response.json();
    const posts = data.posts.nodes;
    allPosts.push(...posts);

    hasNextPage = data.posts.pageInfo.hasNextPage;
    endCursor = data.posts.pageInfo.endCursor;
  }

  const paths = allPosts.map((post) => ({
    params: { slug: post.slug },
  }));

  return paths;
}

    const { slug } = Astro.params;


const singleResponse = await fetch("https://www.rdldn.co.uk/graphql", {
  method: "POST",
  headers: { "Content-Type": "application/json" },
  body: JSON.stringify({
    query: `
        query SinglePost($id: ID = "${slug}") {
          post(idType: SLUG, id: $id) {
            postId
            date
            content
            title
            featuredImage {
              node {
                sourceUrl
              }
            }
            seo {
              opengraphTitle
              opengraphDescription
              opengraphSiteName
              opengraphImage {
                uri
                altText
                mediaDetails {
                  file
                  height
                  width
                }
                mediaItemUrl
                sourceUrl
                srcSet
              }
            }
            areas {
              nodes {
                name
              }
            }
            boroughs {
              nodes {
                name
              }
            }
            tubeStations {
              nodes {
                name
              }
            }
            tubeLines {
              nodes {
                name
              }
            }
            prices {
              nodes {
                name
              }
            }
            ratings {
              nodes {
                name
              }
            }
            yearsOfVisit {
              nodes {
                name
              }
            }
            typesOfPost {
              nodes {
                name
              }
            }
            highlights {
              loathed
              loved
              website
              locationPost
              instagram
            }
            comments(where: { order: DESC }) {
              nodes {
                id
                content
                parentId
                author {
                  node {
                    name
                  }
                }
                date
              }
            }
          }
        }
        `,
  }),
});

const { data } = await singleResponse.json();

const singlePost = data.post;

const organiseComments = (comments: CommentsType) => {
  const commentMap = new Map();

  // biome-ignore lint/complexity/noForEach: <explanation>
  comments?.forEach((comment) => {
    comment.replies = [];
    commentMap.set(comment.id, comment);
  });

  const topLevelComments: CommentsType = [];
  // biome-ignore lint/complexity/noForEach: <explanation>
  comments?.forEach((comment) => {
    if (comment.parentId) {
      const parent = commentMap.get(comment.parentId);
      if (parent) {
        parent.replies.push(comment);
      }
    } else {
      topLevelComments.push(comment);
    }
  });

  return topLevelComments;
};

const threadedComments = organiseComments(data.post.comments.nodes);
---

<BaseLayout
  pageTitle={singlePost.title}
  description={singlePost?.seo?.opengraphDescription}
  opengraphImage={singlePost.seo.opengraphImage.sourceUrl}
>
  <div class="image-container">
    <Image
      src={singlePost.featuredImage.node.sourceUrl}
      alt={singlePost.title}
      width={5000}
      height={5000}
      class="featured-image"
      loading="eager"
    />
    <div class="copyright-overlay">
      &copy; {new Date().getFullYear()} Roast Dinners in London. All rights reserved.
    </div>
  </div>
  <section class="post-title">
    <h2>{singlePost.title}</h2>
    <p>
      Published: {
        new Date(singlePost.date).toLocaleDateString("en-UK", {
          year: "numeric",
          month: "long",
          day: "numeric",
        })
      }
    </p>
  </section>
  <div class="container">
    <button
  class="skip"
  onclick="
    const el = document.getElementById('summary');
    if (el) {
      const y = el.getBoundingClientRect().top + window.pageYOffset - 120;
      window.scrollTo({ top: y, behavior: 'smooth' });
    }
  "
>
  Skip The Nonsense
</button>
    <div set:html={singlePost.content} />
    { singlePost.typesOfPost.nodes[0]?.name === "Roast Dinner" && (
    <section id="summary" class="summary">
              <h3>Summary:</h3>
        <p>{singlePost.title}</p>
      {singlePost.tubeStations.nodes[0]?.name && <p>Station: {singlePost.tubeStations.nodes[0]?.name}</p> }
              <p>
        Line:{" "}
        {singlePost.tubeLines.nodes
          .map((line: { name: string }) => line.name)
          .join(", ")}
      </p>
      <p>Price: {singlePost.prices.nodes[0].name}</p>
      <p>Rating: {singlePost.ratings.nodes[0].name}</p>
      <p>Year of Visit: {singlePost.yearsOfVisit.nodes[0].name}</p>
    </section>
    <section>
      <h3>Loved & Loathed:</h3>
      <p>Loved: {singlePost.highlights.loved}</p>
      <p>Loathed: {singlePost.highlights.loathed}</p>
    </section>
    <section>
      <h3>Get Booking:</h3>
      {singlePost.highlights.website && (
        <p>
          <a href={`${singlePost.highlights.website}`}>
            {" "}
            Book {singlePost.title}
          </a>
        </p>
      )}
      {singlePost.highlights.instagram && (
        <p>
          <a href={`${singlePost.highlights.instagram}`}>
            Follow on Instagram
          </a>
        </p>
      )}
    </section>
    <RoastByTagSection
      type="location"
      tag={singlePost.boroughs.nodes[0]?.name.replace(/\s+/g, "-")}
    />
    <Comments threadedComments={threadedComments} postId={singlePost.postId} />
    // <section>
    //   <h3>Also in {singlePost.areas.nodes[0].name}:</h3>
    // </section>
    // <section>
    //   <h3>Also around {singlePost.boroughs.nodes[0].name}:</h3>
    // </section>
    )}
  </div>
</BaseLayout>
