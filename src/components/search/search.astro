---
import "../../styles/index.css";
---

<div x-data="searchComponent()" class="search-container-parent">
  <form @submit.prevent="handleSearch">
    <input type="text" placeholder="Search..." x-model="searchTerm" required />
    <button type="submit">Search</button>
  </form>

  <section class="home-list search-container" x-show="searchResults.length > 0">
    <ul>
      <template x-for="post in searchResults" :key="post.slug">
        <li class="heading">
          <h3>
            <a :href="`/${post.slug}`" x-text="post.title"></a>
          </h3>

          <a :href="`/${post.slug}`" rel="noopener noreferrer" class="featured-image">
            <img
              :src="post.featuredImage?.node?.sourceUrl"
              :alt="`Photo of the roast dinner at ${post.title}`"
              width="400"
              height="300"
            />
          </a>
        </li>
      </template>
    </ul>
  </section>
  <p x-show="searchPerformed && searchResults.length === 0">No results found.</p>
</div>

<script>
  document.addEventListener("alpine:init", () => {
    Alpine.data("searchComponent", () => ({
      searchTerm: "",
      searchResults: [],
      searchPerformed: false,
      async handleSearch() {
        try {
          this.searchPerformed = false;
          const GRAPHQL_ENDPOINT = "https://blog.rdldn.co.uk/graphql";
          const SEARCH_QUERY = `
            query SearchPosts($search: String!) {
              posts(where: { search: $search }, first: 4) {
                nodes {
                  title
                  slug
                  featuredImage {
                    node {
                      sourceUrl
                    }
                  }
                }
              }
            }
          `;

          const response = await fetch(GRAPHQL_ENDPOINT, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
              query: SEARCH_QUERY,
              variables: { search: this.searchTerm },
            }),
          });

          const json = await response.json();
          this.searchResults = json?.data?.posts?.nodes || [];
        } catch (error) {
          console.error("Error fetching search results:", error);
        } finally {
          this.searchPerformed = true;
        }
      },
    }));
  });
</script>
