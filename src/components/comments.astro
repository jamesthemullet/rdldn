---
interface Props {
  threadedComments: CommentsType;
  postId: string;
}

import type { Comments as CommentsType } from "../types";
import Comment from "./comment.astro";
import "../styles/index.css";
import "../styles/comments.css";

const { threadedComments, postId } = Astro.props as Props;
---

<section class="comments-block">
  <h3>Any comments?</h3>

  {
    threadedComments && threadedComments?.length > 0 ? (
      <ul class="comments-list">
        {threadedComments?.map((comment) => (
          <Comment comment={comment} postId={postId} commentId={comment.id} />
        ))}
      </ul>
    ) : (
      <p>No comments yet. Be the first to comment!</p>
    )
  }

  <form id="comment-form" class="comment-form" data-post-id={postId}>
    <div>
      <label for="authorName">Name:</label>
      <input type="text" id="authorName" required />
    </div>
    <div>
      <label for="email">Email:</label>
      <input type="email" id="email" required />
    </div><div>
      <label for="commentText">Comment:</label>
      <textarea id="commentText" required></textarea>
    </div>
    <button type="submit">Post Comment</button>
    <p id="message"></p>
  </form>
</section>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const form = document.getElementById("comment-form") as HTMLFormElement;
    const message = document.getElementById("message");

    form?.addEventListener("submit", async (event) => {
      event.preventDefault();

      const authorName = (form.querySelector("#authorName") as HTMLInputElement)
        ?.value;

      const email = (form.querySelector("#email") as HTMLInputElement)?.value;
      const commentText = (
        form.querySelector("#commentText") as HTMLTextAreaElement
      )?.value;

      const postId = form?.getAttribute("data-post-id");

      const response = await fetch("https://www.rdldn.co.uk/graphql", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          query: `mutation AddComment($input: CreateCommentInput!) {
            createComment(input: $input) {
              success
            }
          }`,
          variables: {
            input: {
              author: authorName,
              authorEmail: email,
              content: commentText,
              commentOn: postId && parseInt(postId, 10),
            },
          },
        }),
      });

      const data = await response.json();
      if (data.errors) {
        if (message) {
          message.textContent = `Failed to submit comment: ${data.errors[0].message}`;
          message.style.color = "red";
        }
      } else {
        if (message) {
          message.textContent = "Comment submitted! Awaiting moderation.";
          message.style.color = "green";
        }
        form.reset();
      }
    });
  });
</script>
